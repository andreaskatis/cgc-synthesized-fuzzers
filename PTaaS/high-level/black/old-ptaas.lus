--          object  spec  parm    position vector    color   emission
-- sphere : s       [d,s] radius  (x,y,z)            (r,g,b) (r,g,b)
-- plane  : p       [d,s]         (x,y,z) (x,y,z)    (r,g,b) (r,g,b)
-- camera : c             fov     (x,y,z) (x,y,z) 
-- render : r
-- quit   : q
--
-- r,g,b: [1,100]

type tuple = struct {
  x: int;
  y: int;
  z: int
};

type rgb = struct {
  r: int;
  g: int;
  b: int
};

node main(object: int; spec : int; parm : int; position : tuple; vector: tuple; color: rgb; emission: rgb) returns ();
var
  black: bool;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7, ok8, ok9, ok10, ok11, ok12, ok13, ok14, ok15 : bool;
let

  ok1 =(0 <= object and object <= 4);
  ok2 =(0 <= spec   and spec <= 1);
  ok3 =(0 <= parm   and parm <= 255);

  ok4 =(-256 <= position.x and position.x <= 256);
  ok5 =(-256 <= position.y and position.y <= 256);
  ok6 =(-256 <= position.z and position.z <= 256);

  ok7 =(-256 <= vector.x and vector.x <= 256);
  ok8 =(-256 <= vector.y and vector.y <= 256);
  ok9 =(-256 <= vector.z and vector.z <= 256);

  ok10 =(0 <= color.r and color.r <= 255);
  ok11 =(0 <= color.g and color.g <= 255);
  ok12 =(0 <= color.b and color.b <= 255);

  ok13 =(0 <= emission.r and emission.r <= 255);
  ok14 =(0 <= emission.g and emission.g <= 255);
  ok15 =(0 <= emission.b and emission.b <= 255);

  black = true;

  --%PROPERTY black;
  --%PROPERTY ok1;
  --%PROPERTY ok2;
  --%PROPERTY ok3;
  --%PROPERTY ok4;
  --%PROPERTY ok5;
  --%PROPERTY ok6;
  --%PROPERTY ok7;
  --%PROPERTY ok8;
  --%PROPERTY ok9;
  --%PROPERTY ok10;
  --%PROPERTY ok11;
  --%PROPERTY ok12;
  --%PROPERTY ok13;
  --%PROPERTY ok14;
  --%PROPERTY ok15;

  --%REALIZABLE;
tel
