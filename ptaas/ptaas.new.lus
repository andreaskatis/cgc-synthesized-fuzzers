function generateRandomValue(
  lflag : bool;
  uflag : bool;
  lbound : int;
  ubound : int
) returns (
  randomValue : int
);


node Skolem_main(

) returns (
  emission_b : int;
  emission_g : int;
  _aeval_tmp_rand_int_12 : int;
  emission_r : int;
  _aeval_tmp_rand_int_11 : int;
  color_b : int;
  color_r : int;
  _aeval_tmp_rand_int_8 : int;
  _aeval_tmp_rand_int_13 : int;
  vector_z : int;
  vector_y : int;
  color_g : int;
  _aeval_tmp_rand_int_6 : int;
  vector_x : int;
  _aeval_tmp_rand_int_5 : int;
  position_y : int;
  _aeval_tmp_rand_int_7 : int;
  position_x : int;
  _aeval_tmp_rand_int_3 : int;
  ok9 : bool;
  ok8 : bool;
  _aeval_tmp_rand_int_10 : int;
  ok7 : bool;
  position_z : int;
  _aeval_tmp_rand_int_1 : int;
  ok6 : bool;
  ok4 : bool;
  _aeval_tmp_rand_int_0 : int;
  ok5 : bool;
  ok1 : bool;
  black : bool;
  _aeval_tmp_rand_int_2 : int;
  _aeval_tmp_rand_int_4 : int;
  ok2 : bool;
  ok3 : bool;
  ok10 : bool;
  ok11 : bool;
  ok12 : bool;
  ok13 : bool;
  object : int;
  _aeval_tmp_rand_int_9 : int;
  ok14 : bool;
  _aeval_tmp_rand_int_14 : int;
  spec : int;
  ok15 : bool;
  parm : int
);
var
  init : int;
let
  black = true;

  ok1 = true;

  ok2 = true;

  ok3 = true;

  ok4 = true;

  ok5 = true;

  ok6 = true;

  ok7 = true;

  ok8 = true;

  ok9 = true;

  ok10 = true;

  ok11 = true;

  ok12 = true;

  ok13 = true;

  ok14 = true;

  ok15 = true;

  _aeval_tmp_rand_int_0 = generateRandomValue(true, true, 0, 4);

  object = _aeval_tmp_rand_int_0;

  _aeval_tmp_rand_int_1 = generateRandomValue(true, true, 0, 1);

  spec = _aeval_tmp_rand_int_1;

  _aeval_tmp_rand_int_2 = generateRandomValue(true, true, 0, 255);

  parm = _aeval_tmp_rand_int_2;

  _aeval_tmp_rand_int_3 = generateRandomValue(true, true, (-256), 256);

  position_x = _aeval_tmp_rand_int_3;

  _aeval_tmp_rand_int_4 = generateRandomValue(true, true, (-256), 256);

  position_y = _aeval_tmp_rand_int_4;

  _aeval_tmp_rand_int_5 = generateRandomValue(true, true, (-256), 256);

  position_z = _aeval_tmp_rand_int_5;

  _aeval_tmp_rand_int_6 = generateRandomValue(true, true, (-256), 256);

  vector_x = _aeval_tmp_rand_int_6;

  _aeval_tmp_rand_int_7 = generateRandomValue(true, true, (-256), 256);

  vector_y = _aeval_tmp_rand_int_7;

  _aeval_tmp_rand_int_8 = generateRandomValue(true, true, (-256), 256);

  vector_z = _aeval_tmp_rand_int_8;

  _aeval_tmp_rand_int_9 = generateRandomValue(true, true, 0, 255);

  color_r = _aeval_tmp_rand_int_9;

  _aeval_tmp_rand_int_10 = generateRandomValue(true, true, 0, 255);

  color_g = _aeval_tmp_rand_int_10;

  _aeval_tmp_rand_int_11 = generateRandomValue(true, true, 0, 255);

  color_b = _aeval_tmp_rand_int_11;

  _aeval_tmp_rand_int_12 = generateRandomValue(true, true, 0, 255);

  emission_r = _aeval_tmp_rand_int_12;

  _aeval_tmp_rand_int_13 = generateRandomValue(true, true, 0, 255);

  emission_g = _aeval_tmp_rand_int_13;

  _aeval_tmp_rand_int_14 = generateRandomValue(true, true, 0, 255);

  emission_b = _aeval_tmp_rand_int_14;

  init = (0 -> 1);

  assert ((0 <= _aeval_tmp_rand_int_0) and (_aeval_tmp_rand_int_0 <= 4));

  assert ((0 <= _aeval_tmp_rand_int_1) and (_aeval_tmp_rand_int_1 <= 1));

  assert ((0 <= _aeval_tmp_rand_int_2) and (_aeval_tmp_rand_int_2 <= 255));

  assert (((-256) <= _aeval_tmp_rand_int_3) and (_aeval_tmp_rand_int_3 <= 256));

  assert (((-256) <= _aeval_tmp_rand_int_4) and (_aeval_tmp_rand_int_4 <= 256));

  assert (((-256) <= _aeval_tmp_rand_int_5) and (_aeval_tmp_rand_int_5 <= 256));

  assert (((-256) <= _aeval_tmp_rand_int_6) and (_aeval_tmp_rand_int_6 <= 256));

  assert (((-256) <= _aeval_tmp_rand_int_7) and (_aeval_tmp_rand_int_7 <= 256));

  assert (((-256) <= _aeval_tmp_rand_int_8) and (_aeval_tmp_rand_int_8 <= 256));

  assert ((0 <= _aeval_tmp_rand_int_9) and (_aeval_tmp_rand_int_9 <= 255));

  assert ((0 <= _aeval_tmp_rand_int_10) and (_aeval_tmp_rand_int_10 <= 255));

  assert ((0 <= _aeval_tmp_rand_int_11) and (_aeval_tmp_rand_int_11 <= 255));

  assert ((0 <= _aeval_tmp_rand_int_12) and (_aeval_tmp_rand_int_12 <= 255));

  assert ((0 <= _aeval_tmp_rand_int_13) and (_aeval_tmp_rand_int_13 <= 255));

  assert ((0 <= _aeval_tmp_rand_int_14) and (_aeval_tmp_rand_int_14 <= 255));

tel;

node __CONTRACT(
  object : int;
  spec : int;
  parm : int;
  position_x : int;
  position_y : int;
  position_z : int;
  vector_x : int;
  vector_y : int;
  vector_z : int;
  color_b : int;
  color_g : int;
  color_r : int;
  emission_b : int;
  emission_g : int;
  emission_r : int
) returns (
  __ASSERTS : bool
);
var
  black : bool;
  ok1 : bool;
  ok2 : bool;
  ok3 : bool;
  ok4 : bool;
  ok5 : bool;
  ok6 : bool;
  ok7 : bool;
  ok8 : bool;
  ok9 : bool;
  ok10 : bool;
  ok11 : bool;
  ok12 : bool;
  ok13 : bool;
  ok14 : bool;
  ok15 : bool;
let
  ok1 = ((0 <= object) and (object <= 4));

  ok2 = ((0 <= spec) and (spec <= 1));

  ok3 = ((0 <= parm) and (parm <= 255));

  ok4 = (((-256) <= position_x) and (position_x <= 256));

  ok5 = (((-256) <= position_y) and (position_y <= 256));

  ok6 = (((-256) <= position_z) and (position_z <= 256));

  ok7 = (((-256) <= vector_x) and (vector_x <= 256));

  ok8 = (((-256) <= vector_y) and (vector_y <= 256));

  ok9 = (((-256) <= vector_z) and (vector_z <= 256));

  ok10 = ((0 <= color_r) and (color_r <= 255));

  ok11 = ((0 <= color_g) and (color_g <= 255));

  ok12 = ((0 <= color_b) and (color_b <= 255));

  ok13 = ((0 <= emission_r) and (emission_r <= 255));

  ok14 = ((0 <= emission_g) and (emission_g <= 255));

  ok15 = ((0 <= emission_b) and (emission_b <= 255));

  black = true;

  __ASSERTS = true;

  --%PROPERTY black;
  --%PROPERTY ok1;
  --%PROPERTY ok2;
  --%PROPERTY ok3;
  --%PROPERTY ok4;
  --%PROPERTY ok5;
  --%PROPERTY ok6;
  --%PROPERTY ok7;
  --%PROPERTY ok8;
  --%PROPERTY ok9;
  --%PROPERTY ok10;
  --%PROPERTY ok11;
  --%PROPERTY ok12;
  --%PROPERTY ok13;
  --%PROPERTY ok14;
  --%PROPERTY ok15;

tel;

node __TOPLEVEL(

) returns (
  emission_b : int;
  emission_g : int;
  _aeval_tmp_rand_int_12 : int;
  emission_r : int;
  _aeval_tmp_rand_int_11 : int;
  color_b : int;
  color_r : int;
  _aeval_tmp_rand_int_8 : int;
  _aeval_tmp_rand_int_13 : int;
  vector_z : int;
  vector_y : int;
  color_g : int;
  _aeval_tmp_rand_int_6 : int;
  vector_x : int;
  _aeval_tmp_rand_int_5 : int;
  position_y : int;
  _aeval_tmp_rand_int_7 : int;
  position_x : int;
  _aeval_tmp_rand_int_3 : int;
  ok9 : bool;
  ok8 : bool;
  _aeval_tmp_rand_int_10 : int;
  ok7 : bool;
  position_z : int;
  _aeval_tmp_rand_int_1 : int;
  ok6 : bool;
  ok4 : bool;
  _aeval_tmp_rand_int_0 : int;
  ok5 : bool;
  ok1 : bool;
  black : bool;
  _aeval_tmp_rand_int_2 : int;
  _aeval_tmp_rand_int_4 : int;
  ok2 : bool;
  ok3 : bool;
  ok10 : bool;
  ok11 : bool;
  ok12 : bool;
  ok13 : bool;
  object : int;
  _aeval_tmp_rand_int_9 : int;
  ok14 : bool;
  _aeval_tmp_rand_int_14 : int;
  spec : int;
  ok15 : bool;
  parm : int
);
var
  __ASSERTS : bool;
let
  --%MAIN;
  emission_b, emission_g, _aeval_tmp_rand_int_12, emission_r, _aeval_tmp_rand_int_11, color_b, color_r, _aeval_tmp_rand_int_8, _aeval_tmp_rand_int_13, vector_z, vector_y, color_g, _aeval_tmp_rand_int_6, vector_x, _aeval_tmp_rand_int_5, position_y, _aeval_tmp_rand_int_7, position_x, _aeval_tmp_rand_int_3, ok9, ok8, _aeval_tmp_rand_int_10, ok7, position_z, _aeval_tmp_rand_int_1, ok6, ok4, _aeval_tmp_rand_int_0, ok5, ok1, black, _aeval_tmp_rand_int_2, _aeval_tmp_rand_int_4, ok2, ok3, ok10, ok11, ok12, ok13, object, _aeval_tmp_rand_int_9, ok14, _aeval_tmp_rand_int_14, spec, ok15, parm = Skolem_main();

  __ASSERTS = __CONTRACT(object, spec, parm, position_x, position_y, position_z, vector_x, vector_y, vector_z, color_b, color_g, color_r, emission_b, emission_g, emission_r);

  assert __ASSERTS;

  assert ((0 <= _aeval_tmp_rand_int_0) and (_aeval_tmp_rand_int_0 <= 4));

  assert ((0 <= _aeval_tmp_rand_int_1) and (_aeval_tmp_rand_int_1 <= 1));

  assert ((0 <= _aeval_tmp_rand_int_2) and (_aeval_tmp_rand_int_2 <= 255));

  assert (((-256) <= _aeval_tmp_rand_int_3) and (_aeval_tmp_rand_int_3 <= 256));

  assert (((-256) <= _aeval_tmp_rand_int_4) and (_aeval_tmp_rand_int_4 <= 256));

  assert (((-256) <= _aeval_tmp_rand_int_5) and (_aeval_tmp_rand_int_5 <= 256));

  assert (((-256) <= _aeval_tmp_rand_int_6) and (_aeval_tmp_rand_int_6 <= 256));

  assert (((-256) <= _aeval_tmp_rand_int_7) and (_aeval_tmp_rand_int_7 <= 256));

  assert (((-256) <= _aeval_tmp_rand_int_8) and (_aeval_tmp_rand_int_8 <= 256));

  assert ((0 <= _aeval_tmp_rand_int_9) and (_aeval_tmp_rand_int_9 <= 255));

  assert ((0 <= _aeval_tmp_rand_int_10) and (_aeval_tmp_rand_int_10 <= 255));

  assert ((0 <= _aeval_tmp_rand_int_11) and (_aeval_tmp_rand_int_11 <= 255));

  assert ((0 <= _aeval_tmp_rand_int_12) and (_aeval_tmp_rand_int_12 <= 255));

  assert ((0 <= _aeval_tmp_rand_int_13) and (_aeval_tmp_rand_int_13 <= 255));

  assert ((0 <= _aeval_tmp_rand_int_14) and (_aeval_tmp_rand_int_14 <= 255));

tel;
