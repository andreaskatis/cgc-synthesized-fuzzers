type USER_itype = real;
type USER_register = USER_vtype[16];
type USER_vtype = real;
type USER_hexa = real;
type USER_quad = real;

const USER_XACT_INPUT_REGISTER = 3.0;
const USER_XACT_COIL_STATUS = 0.0;
const USER_ZERO = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
const USER_MAX_VTYPE = 2147483647.0;
const USER_XACT_HOLD_REGISTER = 2.0;
const USER_DO_WRITE_K = 4.0;
const USER_MAX_INDEX = 8191.0;
const USER_DO_WRITE = 2.0;
const USER_DO_TWINKLE = 5.0;
const USER_VTYPE_BOUND0 = 65535.0;
const USER_XACT_INPUT_STATUS = 1.0;
const USER_VTYPE_BOUND1 = 16777215.0;
const USER_DO_NOTHING = 0.0;
const USER_VTYPE_BOUND2 = 2147483647.0;
const USER_DO_READ = 1.0;
const USER_DO_READ_K = 3.0;

node initially(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal -> true);

tel;

node historically(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal and (true -> (pre holds)));

tel;

node once(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal or (false -> (pre holds)));

tel;

node since(
  a : bool;
  b : bool
) returns (
  holds : bool
);
let
  holds = (b or (a and (false -> (pre holds))));

tel;

node triggers(
  a : bool;
  b : bool
) returns (
  holds : bool
);
let
  holds = (b and (a or (false -> (pre holds))));

tel;

node responds(
  a : bool;
  b : bool;
  n : int
) returns (
  holds : bool
);
var
  latch : int;
  i : int;
  pre_state : int;
  state : int;
let
  latch = (n -> (pre latch));

  pre_state = (0 -> (pre state));

  state = (if (pre_state = 0) then (if ((not b) or (a and b)) then 0 else 1) else (if (pre_state = 1) then (if ((not a) and (i < latch)) then 1 else (if (a and b) then 1 else (if ((not a) and (i >= latch)) then 2 else 0))) else 2));

  i = (if (pre_state = 0) then 0 else (if (pre_state = 1) then (if (not a) then ((pre i) + 1) else (if (a and b) then 0 else (pre i))) else (pre i)));

  holds = ((state = 0) or (state = 1));

tel;

node precedes(
  a : bool;
  b : bool
) returns (
  holds : bool
);
var
  state : int;
  pre_state : int;
let
  pre_state = (0 -> (pre state));

  state = (if (pre_state = 0) then (if ((a and b) or ((not a) and (not b))) then 0 else (if (a and (not b)) then 1 else 2)) else (if (pre_state = 1) then (if b then 0 else 1) else 2));

  holds = ((state = 0) or (state = 1));

tel;

node count(
  a : bool
) returns (
  c : int
);
let
  c = ((0 -> (pre c)) + (if a then 1 else 0));

tel;

node ccount(
  a : bool
) returns (
  c : int
);
let
  c = (if a then ((0 -> (pre c)) + 1) else 0);

tel;

node btoi(
  a : bool
) returns (
  c : int
);
let
  c = (if a then 1 else 0);

tel;

node USER_stopS(
  USER_cmd : USER_hexa;
  USER_rindex : USER_itype;
  USER_rvalue : USER_vtype;
  USER_xrw : bool;
  USER_xact : USER_quad;
  USER_xindex : USER_itype;
  USER_xvalue : USER_vtype;
  USER_xreg : USER_register;
  USER_last_index : real;
  USER_busy : bool
) returns (
  constraints : bool
);
var
  generated_macro_0 : USER_register;
  generated_macro_1 : real;
  generated_macro_2 : real;
  generated_macro_3 : real;
  generated_macro_4 : real;
  generated_macro_5 : real;
  generated_macro_6 : real;
  generated_macro_7 : real;
  generated_macro_8 : real;
  generated_macro_9 : real;
  generated_macro_10 : real;
  generated_macro_11 : real;
  generated_macro_12 : real;
  generated_macro_13 : real;
  generated_macro_14 : real;
  generated_macro_15 : real;
  generated_macro_16 : real;
  generated_macro_17 : real;
  generated_macro_18 : real;
  generated_macro_19 : real;
  generated_macro_20 : real;
  generated_macro_21 : real;
  generated_macro_22 : real;
  generated_macro_23 : real;
  generated_macro_24 : real;
  generated_macro_25 : real;
  generated_macro_26 : real;
  generated_macro_27 : real;
  generated_macro_28 : real;
  generated_macro_29 : real;
  generated_macro_30 : real;
  generated_macro_31 : real;
  generated_macro_32 : real;
  generated_macro_33 : real;
  generated_macro_34 : real;
  generated_macro_35 : real;
  generated_macro_36 : real;
  generated_macro_37 : real;
  generated_macro_38 : real;
  generated_macro_39 : real;
  generated_macro_40 : real;
  generated_macro_41 : real;
  generated_macro_42 : real;
  generated_macro_43 : real;
  generated_macro_44 : real;
  generated_macro_45 : real;
  generated_macro_46 : real;
  generated_macro_47 : real;
  generated_macro_48 : real;
  generated_macro_49 : real;
  generated_macro_50 : real;
  generated_macro_51 : real;
  generated_macro_52 : real;
  generated_macro_53 : real;
  generated_macro_54 : real;
  generated_macro_55 : real;
  generated_macro_56 : real;
  generated_macro_57 : real;
  generated_macro_58 : real;
  generated_macro_59 : real;
  generated_macro_60 : real;
  generated_macro_61 : real;
  generated_macro_62 : real;
  generated_macro_63 : real;
  generated_macro_64 : real;
  generated_macro_65 : real;
  USER_cmd_satisfies_predicate : bool;
  USER_rindex_satisfies_predicate : bool;
  USER_rvalue_satisfies_predicate : bool;
  USER_xvalue_bound_0 : bool;
  USER_last_index_def : bool;
  USER_busy_def : bool;
  USER_xreg_def : bool;
  USER_twinkle_cmd_1 : bool;
  USER_twinkle_cmd_2 : bool;
  USER_read_cmd : bool;
  USER_write_cmd : bool;
  USER_read_key : bool;
  USER_write_key : bool;
  USER_ZERO_satisfies_predicate : bool;
  USER_xact_satisfies_predicate : bool;
  USER_xindex_satisfies_predicate : bool;
  USER_xvalue_satisfies_predicate : bool;
  USER_xreg_satisfies_predicate : bool;
  counter : int;
let
  --%MAIN;
  counter = (1 -> ((pre counter) + 1));

  generated_macro_0 = USER_xreg[floor(USER_rindex) := USER_rvalue];

  generated_macro_1 = USER_xreg[0];

  generated_macro_2 = USER_ZERO[0];

  generated_macro_3 = USER_ZERO[0];

  generated_macro_4 = USER_ZERO[1];

  generated_macro_5 = USER_ZERO[1];

  generated_macro_6 = USER_ZERO[2];

  generated_macro_7 = USER_ZERO[2];

  generated_macro_8 = USER_ZERO[3];

  generated_macro_9 = USER_ZERO[3];

  generated_macro_10 = USER_ZERO[4];

  generated_macro_11 = USER_ZERO[4];

  generated_macro_12 = USER_ZERO[5];

  generated_macro_13 = USER_ZERO[5];

  generated_macro_14 = USER_ZERO[6];

  generated_macro_15 = USER_ZERO[6];

  generated_macro_16 = USER_ZERO[7];

  generated_macro_17 = USER_ZERO[7];

  generated_macro_18 = USER_ZERO[8];

  generated_macro_19 = USER_ZERO[8];

  generated_macro_20 = USER_ZERO[9];

  generated_macro_21 = USER_ZERO[9];

  generated_macro_22 = USER_ZERO[10];

  generated_macro_23 = USER_ZERO[10];

  generated_macro_24 = USER_ZERO[11];

  generated_macro_25 = USER_ZERO[11];

  generated_macro_26 = USER_ZERO[12];

  generated_macro_27 = USER_ZERO[12];

  generated_macro_28 = USER_ZERO[13];

  generated_macro_29 = USER_ZERO[13];

  generated_macro_30 = USER_ZERO[14];

  generated_macro_31 = USER_ZERO[14];

  generated_macro_32 = USER_ZERO[15];

  generated_macro_33 = USER_ZERO[15];

  generated_macro_34 = USER_xreg[0];

  generated_macro_35 = USER_xreg[0];

  generated_macro_36 = USER_xreg[1];

  generated_macro_37 = USER_xreg[1];

  generated_macro_38 = USER_xreg[2];

  generated_macro_39 = USER_xreg[2];

  generated_macro_40 = USER_xreg[3];

  generated_macro_41 = USER_xreg[3];

  generated_macro_42 = USER_xreg[4];

  generated_macro_43 = USER_xreg[4];

  generated_macro_44 = USER_xreg[5];

  generated_macro_45 = USER_xreg[5];

  generated_macro_46 = USER_xreg[6];

  generated_macro_47 = USER_xreg[6];

  generated_macro_48 = USER_xreg[7];

  generated_macro_49 = USER_xreg[7];

  generated_macro_50 = USER_xreg[8];

  generated_macro_51 = USER_xreg[8];

  generated_macro_52 = USER_xreg[9];

  generated_macro_53 = USER_xreg[9];

  generated_macro_54 = USER_xreg[10];

  generated_macro_55 = USER_xreg[10];

  generated_macro_56 = USER_xreg[11];

  generated_macro_57 = USER_xreg[11];

  generated_macro_58 = USER_xreg[12];

  generated_macro_59 = USER_xreg[12];

  generated_macro_60 = USER_xreg[13];

  generated_macro_61 = USER_xreg[13];

  generated_macro_62 = USER_xreg[14];

  generated_macro_63 = USER_xreg[14];

  generated_macro_64 = USER_xreg[15];

  generated_macro_65 = USER_xreg[15];

  USER_cmd_satisfies_predicate = ((0.0 <= USER_cmd) and (USER_cmd <= 5.0));

  USER_rindex_satisfies_predicate = ((0.0 <= USER_rindex) and (USER_rindex <= USER_MAX_INDEX));

  USER_rvalue_satisfies_predicate = ((0.0 <= USER_rvalue) and (USER_rvalue <= USER_MAX_VTYPE));

  USER_xvalue_bound_0 = ((0.0 <= USER_xvalue) and (USER_xvalue <= USER_MAX_VTYPE));

  USER_last_index_def = (USER_last_index = (0.0 -> (pre USER_xindex)));

  USER_busy_def = (USER_busy = (false -> (pre ((not USER_busy) and (USER_cmd = USER_DO_TWINKLE)))));

  USER_xreg_def = (USER_xreg = (USER_ZERO -> (pre generated_macro_0)));

  USER_twinkle_cmd_1 = (((not USER_busy) and (USER_cmd = USER_DO_TWINKLE)) => (((((not USER_xrw) and (USER_xact = USER_XACT_COIL_STATUS)) and (0.0 <= USER_xindex)) and (USER_xindex <= 16.0)) and (USER_xvalue = 1.0)));

  USER_twinkle_cmd_2 = (USER_busy => ((((not USER_xrw) and (USER_xact = USER_XACT_COIL_STATUS)) and (USER_xindex = USER_last_index)) and (USER_xvalue = 0.0)));

  USER_read_cmd = (((not USER_busy) and (USER_cmd = USER_DO_READ)) => (USER_xrw and (USER_xact = USER_XACT_INPUT_REGISTER)));

  USER_write_cmd = (((not USER_busy) and (USER_cmd = USER_DO_WRITE)) => ((not USER_xrw) and (USER_xact = USER_XACT_HOLD_REGISTER)));

  USER_read_key = (((not USER_busy) and (USER_cmd = USER_DO_READ_K)) => ((USER_xrw and (USER_xact = USER_XACT_INPUT_REGISTER)) and (USER_xindex = 0.0)));

  USER_write_key = (((not USER_busy) and (USER_cmd = USER_DO_WRITE_K)) => ((((not USER_xrw) and (USER_xact = USER_XACT_HOLD_REGISTER)) and (USER_xindex = 1.0)) and (USER_xvalue = generated_macro_1)));

  USER_ZERO_satisfies_predicate = (((0.0 <= generated_macro_2) and (generated_macro_3 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_4) and (generated_macro_5 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_6) and (generated_macro_7 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_8) and (generated_macro_9 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_10) and (generated_macro_11 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_12) and (generated_macro_13 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_14) and (generated_macro_15 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_16) and (generated_macro_17 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_18) and (generated_macro_19 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_20) and (generated_macro_21 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_22) and (generated_macro_23 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_24) and (generated_macro_25 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_26) and (generated_macro_27 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_28) and (generated_macro_29 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_30) and (generated_macro_31 <= USER_MAX_VTYPE)) and ((0.0 <= generated_macro_32) and (generated_macro_33 <= USER_MAX_VTYPE)))))))))))))))));

  USER_xact_satisfies_predicate = ((0.0 <= USER_xact) and (USER_xact <= 3.0));

  USER_xindex_satisfies_predicate = ((0.0 <= USER_xindex) and (USER_xindex <= USER_MAX_INDEX));

  USER_xvalue_satisfies_predicate = ((0.0 <= USER_xvalue) and (USER_xvalue <= USER_MAX_VTYPE));

  USER_xreg_satisfies_predicate = (((0.0 <= generated_macro_34) and (generated_macro_35 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_36) and (generated_macro_37 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_38) and (generated_macro_39 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_40) and (generated_macro_41 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_42) and (generated_macro_43 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_44) and (generated_macro_45 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_46) and (generated_macro_47 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_48) and (generated_macro_49 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_50) and (generated_macro_51 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_52) and (generated_macro_53 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_54) and (generated_macro_55 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_56) and (generated_macro_57 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_58) and (generated_macro_59 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_60) and (generated_macro_61 <= USER_MAX_VTYPE)) and (((0.0 <= generated_macro_62) and (generated_macro_63 <= USER_MAX_VTYPE)) and ((0.0 <= generated_macro_64) and (generated_macro_65 <= USER_MAX_VTYPE)))))))))))))))));

  constraints = historically((USER_xvalue_bound_0 and (USER_last_index_def and (USER_busy_def and (USER_xreg_def and (USER_twinkle_cmd_1 and (USER_twinkle_cmd_2 and (USER_read_cmd and (USER_write_cmd and (USER_read_key and USER_write_key))))))))));

  assert (USER_cmd_satisfies_predicate and (USER_rindex_satisfies_predicate and USER_rvalue_satisfies_predicate));

  --%PROPERTY constraints;

  --%REALIZABLE USER_cmd, USER_rindex, USER_rvalue;

tel;
