node Skolem_main(
  in : int
) returns (
  out2 : int;
  _aeval_tmp_max_0 : int;
  out1 : int;
  out3 : int
);
var
  init : int;
let
  _aeval_tmp_max_0 = (if (0 < (pre out2)) then (pre out2) else 0);

  out1 = (if (((init = 0) or (not (in = 1))) and (not (init = 0))) then (if (init = 0) then 0 else (if (in = 1) then (pre out1) else (if (in = 2) then 0 else ((pre out1) + 1)))) else (if ((not (init = 0)) or ((pre out2) = 0)) then (if (init = 0) then 0 else (if (in = 1) then (pre out1) else (if (in = 2) then 0 else ((pre out1) + 1)))) else (if (init = 0) then 0 else (if (in = 1) then (pre out1) else (if (in = 2) then 0 else ((pre out1) + 1))))));

  out3 = (if (((init = 0) or (not (in = 1))) and (not (init = 0))) then (if (in = 1) then (pre out3) else ((if (init = 0) then 0 else (if (in = 1) then (pre out1) else (if (in = 2) then 0 else ((pre out1) + 1)))) + (_aeval_tmp_max_0 + 1))) else (if ((not (init = 0)) or ((pre out2) = 0)) then (if (in = 1) then (pre out3) else ((if (init = 0) then 0 else (if (in = 1) then (pre out1) else (if (in = 2) then 0 else ((pre out1) + 1)))) + (pre out2))) else (if (in = 1) then (pre out3) else (if (init = 0) then 0 else (if (in = 1) then (pre out1) else (if (in = 2) then 0 else ((pre out1) + 1)))))));

  out2 = (if (((init = 0) or (not (in = 1))) and (not (init = 0))) then (_aeval_tmp_max_0 + 1) else (if ((not (init = 0)) or ((pre out2) = 0)) then (pre out2) else 0));

  init = (0 -> 1);
tel;

node __CONTRACT(
  in : int;
  out1 : int;
  out2 : int;
  out3 : int
) returns (
  __ASSERTS : bool
);
var
  ok1 : bool;
  ok2 : bool;
  ok3 : bool;
  ok4 : bool;
let
  ok1 = (out1 = (0 -> (if (in = 1) then (pre out1) else (if (in = 2) then 0 else ((pre out1) + 1)))));

  ok2 = (out3 = (if (in = 1) then (pre out3) else (out1 + out2)));

  ok3 = (true -> ((in = 1) => (out2 = (pre out2))));

  ok4 = ((out2 = 0) -> true);

  __ASSERTS = true;

  --%PROPERTY ok1;
  --%PROPERTY ok2;
  --%PROPERTY ok3;
  --%PROPERTY ok4;
tel;

node __TOPLEVEL(
  in : int
) returns (
  out2 : int;
  _aeval_tmp_max_0 : int;
  out1 : int;
  out3 : int
);
var
  __ASSERTS : bool;
let
  --%MAIN;
  out2, _aeval_tmp_max_0, out1, out3 = Skolem_main(in);

  __ASSERTS = __CONTRACT(in, out1, out2, out3);

  assert __ASSERTS;
tel;