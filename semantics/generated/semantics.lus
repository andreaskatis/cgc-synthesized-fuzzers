node initially(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal -> true);

tel;

node historically(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal and (true -> (pre holds)));

tel;

node once(
  signal : bool
) returns (
  holds : bool
);
let
  holds = (signal or (false -> (pre holds)));

tel;

node since(
  a : bool;
  b : bool
) returns (
  holds : bool
);
let
  holds = (b or (a and (false -> (pre holds))));

tel;

node triggers(
  a : bool;
  b : bool
) returns (
  holds : bool
);
let
  holds = (b and (a or (false -> (pre holds))));

tel;

node responds(
  a : bool;
  b : bool;
  n : int
) returns (
  holds : bool
);
var
  latch : int;
  i : int;
  pre_state : int;
  state : int;
let
  latch = (n -> (pre latch));

  pre_state = (0 -> (pre state));

  state = (if (pre_state = 0) then (if ((not b) or (a and b)) then 0 else 1) else (if (pre_state = 1) then (if ((not a) and (i < latch)) then 1 else (if (a and b) then 1 else (if ((not a) and (i >= latch)) then 2 else 0))) else 2));

  i = (if (pre_state = 0) then 0 else (if (pre_state = 1) then (if (not a) then ((pre i) + 1) else (if (a and b) then 0 else (pre i))) else (pre i)));

  holds = ((state = 0) or (state = 1));

tel;

node precedes(
  a : bool;
  b : bool
) returns (
  holds : bool
);
var
  state : int;
  pre_state : int;
let
  pre_state = (0 -> (pre state));

  state = (if (pre_state = 0) then (if ((a and b) or ((not a) and (not b))) then 0 else (if (a and (not b)) then 1 else 2)) else (if (pre_state = 1) then (if b then 0 else 1) else 2));

  holds = ((state = 0) or (state = 1));

tel;

node count(
  a : bool
) returns (
  c : int
);
let
  c = ((0 -> (pre c)) + (if a then 1 else 0));

tel;

node ccount(
  a : bool
) returns (
  c : int
);
let
  c = (if a then ((0 -> (pre c)) + 1) else 0);

tel;

node btoi(
  a : bool
) returns (
  c : int
);
let
  c = (if a then 1 else 0);

tel;

node USER_thrice(
  USER_p : bool
) returns (
  USER_res : bool
);
var
  USER_time : int;
  USER_phis : bool;
let
  USER_time = (0 -> (pre (USER_time + 1)));

  USER_phis = (USER_p and (true -> (pre USER_phis)));

  USER_res = ((USER_time = 2) and USER_phis);

tel;

node USER_oscillate(

) returns (
  USER_res : int
);
let
  USER_res = (2 * (10 -> (pre (-USER_res))));

tel;

node USER_semantics(
  USER_val : int;
  USER_median : int;
  USER_fuzz : int;
  USER_st : int
) returns (
  constraints : bool
);
var
  USER_stx_req : bool;
  USER_med_req : bool;
  USER_out_req : bool;
  USER_test_pattern : bool;
  counter : int;
let
  --%MAIN;
  counter = (1 -> ((pre counter) + 1));

  USER_stx_req = (USER_st = (0 -> (pre (USER_st + USER_val))));

  USER_med_req = (USER_median = (USER_st + USER_val));

  USER_out_req = (((USER_st + USER_val) <= USER_fuzz) and (USER_fuzz < ((USER_st + USER_val) + 10)));

  USER_test_pattern = USER_thrice((USER_fuzz = USER_oscillate()));

  constraints = historically((USER_stx_req and (USER_med_req and USER_out_req)));

  --%PROPERTY constraints;

  --%REALIZABLE USER_val;

tel;
